---
description: Streamlit development, testing, and deployment guide
globs: **/streamlit_app/**/*.py, **/streamlit_app/**/*.yml, **/A__deploy_streamlit.sql
alwaysApply: false
---

# Streamlit Development Guide

This guide covers best practices for developing, testing, and deploying Streamlit applications on Snowflake.

**References:**
- [Streamlit Docs](https://docs.streamlit.io/)
- [Streamlit in Snowflake](https://docs.snowflake.com/en/developer-guide/streamlit/about-streamlit)
- [Streamlit App Testing](https://docs.streamlit.io/develop/concepts/app-testing/get-started)
- [Cursor Browser Tool](https://cursor.com/docs/agent/browser)

---

## Overview

Streamlit in Snowflake runs data apps directly in Snowflake's managed environment using Snowflake warehouses for compute and Snowpark for data access.

### Execution Modes

| Mode | Environment | Session | Packages |
|------|-------------|---------|----------|
| **Production** | Snowflake managed | `get_active_session()` | Snowflake Anaconda only |
| **Local Dev** | Local machine | `connections.toml` fallback | Full PyPI ecosystem |

### Connection Pattern (Required)

**Critical:** Use this pattern to support both local development and Snowflake deployment:

```python
import streamlit as st
from snowflake.snowpark.context import get_active_session
from snowflake.snowpark import Session

@st.cache_resource
def get_snowpark_session():
    """Auto-detect environment and return appropriate session."""
    try:
        return get_active_session()  # Snowflake
    except:
        return Session.builder.config('connection_name', 'default').create()  # Local
```

---

## Local Development

### Installation

**Use `uv pip` for faster, more reliable package management:**

```bash
# Install from requirements.txt (recommended)
uv pip install --system -r requirements.txt

# Or install individual packages
uv pip install --system streamlit snowflake-snowpark-python pandas
```

**Requirements Guidelines:**
- **Pin Streamlit version** to match Snowflake (currently `streamlit==1.46.0`)
- **Unpin other dependencies** for latest compatible versions
- Use `--system` flag with `uv pip` when using conda environments

**Example requirements.txt:**
```txt
# Pinned versions
streamlit==1.46.0  # Must match Snowflake Streamlit version

# Unpinned dependencies (use latest compatible versions)
snowflake-connector-python
snowflake-snowpark-python
pandas
```

### Connection Configuration

**Reference:** [Snowflake CLI Connection Configuration](https://docs.snowflake.com/en/developer-guide/snowflake-cli/connecting/specify-credentials)

Create or use existing `~/.snowflake/connections.toml`:

```toml
[default]
warehouse = "COMPUTE_WH"
database = "YOUR_DB"
schema = "YOUR_SCHEMA"
role = "your_role"
account = "your_account"
user = "your_username"
# Authentication Options (choose one):
password = "your_password"                      # Option 1: Username/Password
# authenticator = "externalbrowser"             # Option 2: SSO (opens browser)
# authenticator = "snowflake_jwt"               # Option 3: Key pair auth
# private_key_path = "~/.ssh/snowflake_key.p8"  # Required for key pair
# private_key_passphrase = "your_passphrase"    # Optional for encrypted key
# authenticator = "oauth"                       # Option 4: OAuth/Token
# token = "your_oauth_token"                    # Required for OAuth
```

### Run Locally

**Option 1: Using Startup Script (Recommended)**
```bash
cd streamlit_app
./run_local.sh  # Sets environment variables and starts Streamlit
```

**Option 2: Manual with Environment Variables**
```bash
# Override database/schema without modifying connections.toml
export SNOWFLAKE_DATABASE=YOUR_DB
export SNOWFLAKE_SCHEMA=YOUR_SCHEMA
streamlit run streamlit_app/1_🏠_Home.py
```

**Option 3: Default Connection**
```bash
streamlit run streamlit_app/app.py  # Uses connections.toml default
```

**Environment Variables for Overrides:**
- `SNOWFLAKE_DATABASE` - Override database name
- `SNOWFLAKE_SCHEMA` - Override schema name  
- `SNOWFLAKE_WAREHOUSE` - Override warehouse name

---

## Testing

**Reference:** [Streamlit App Testing](https://docs.streamlit.io/develop/concepts/app-testing/get-started)
### Pytest (Automated)

```python
from streamlit.testing.v1 import AppTest

def test_app_loads():
    at = AppTest.from_file("app.py").run()
    assert not at.exception

def test_form_submission():
    at = AppTest.from_file("pages/2_Form.py").run()
    at.text_input(key="name").set_value("Test").run()
    at.button(key="submit").click().run()
    assert len(at.success) > 0
```

```bash
pytest streamlit_app/tests/ -v
```

### Browser Tool (Visual)

Start your app locally:
```bash
streamlit run streamlit_app/app.py
```

#### Cursor Browser Tool

**Reference:** [Cursor Browser Tool](https://cursor.com/docs/agent/browser)

If available, use Cursor's beta Browser tool for interactive testing:
```
@browser navigate to http://localhost:8501
@browser click "Submit" button
@browser verify table shows data
@browser fill out form fields with test data
@browser click through multi-page workflows
@browser test responsive design at different widths
@browser validate error messages display correctly
@browser monitor console for JavaScript errors
```

#### Playwright MCP Testing

For comprehensive browser automation and E2E testing, use Playwright MCP server.

**Quick Start JSON:**
```json
{
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["-y", "@playwright/mcp"]
    }
  }
}
```

**Testing Streamlit Apps:**
1. Start app locally with environment variables
2. Use Playwright MCP for testing
3. Verify all pages, navigation, forms, and data display
4. Test responsive design at different screen sizes
5. Check console for errors and network requests
6. Take screenshots for documentation

See [playwright.mdc](.cursor/rules/playwright.mdc) for complete testing workflows, patterns, and best practices.
---

## Deployment

### Method 1: Snowflake CLI (Recommended)

```bash
snow streamlit deploy --replace --connection default
```

### Method 2: Schemachange

```bash
schemachange deploy --config-folder . --connection-name default
```

**Example `migrations/A__deploy_streamlit.sql`:**

```sql
-- Create stage
CREATE STAGE IF NOT EXISTS STREAMLIT_STAGE
    DIRECTORY = (ENABLE = TRUE);

-- Clear and upload files
REMOVE @STREAMLIT_STAGE/streamlit_app/ PATTERN='.*\\.py';
PUT file://streamlit_app/environment.yml @STREAMLIT_STAGE/streamlit_app/ AUTO_COMPRESS=FALSE OVERWRITE=TRUE;
PUT file://streamlit_app/*.py @STREAMLIT_STAGE/streamlit_app/ AUTO_COMPRESS=FALSE OVERWRITE=TRUE;
PUT file://streamlit_app/pages/*.py @STREAMLIT_STAGE/streamlit_app/pages/ AUTO_COMPRESS=FALSE OVERWRITE=TRUE;

-- Create app
CREATE STREAMLIT IF NOT EXISTS MY_APP
    ROOT_LOCATION = '@{{ database }}.{{ schema }}.STREAMLIT_STAGE/streamlit_app'
    MAIN_FILE = 'app.py'
    QUERY_WAREHOUSE = '{{ warehouse }}'
    TITLE = 'My Application';

-- Update to latest
ALTER STREAMLIT IF EXISTS MY_APP SET
    ROOT_LOCATION = '@{{ database }}.{{ schema }}.STREAMLIT_STAGE/streamlit_app'
    MAIN_FILE = 'app.py'
    QUERY_WAREHOUSE = '{{ warehouse }}'
    TITLE = 'My Application';
```

### Verify Deployment

```bash
snow streamlit list --connection default
snow streamlit describe <app_name> --connection default
```

Or in Snowflake UI: **Data** → **Databases** → `<db>` → `<schema>` → **Streamlit** → `<app_name>`

---

## File Structure

### Single-Page App

```
streamlit_app/
├── app.py
├── utils/
│   ├── data_loader.py
│   └── charts.py
├── tests/
│   └── test_app.py
└── environment.yml
```

### Multi-Page App

```
streamlit_app/
├── 1_🏠_Home.py
├── pages/
│   ├── 2_📊_Analytics.py
│   └── 3_⚙️_Settings.py
├── components/
│   └── sidebar.py
├── data/
│   └── queries.py
├── tests/
│   ├── test_home.py
│   └── test_analytics.py
└── environment.yml
```

### environment.yml

```yaml
name: streamlit_app
channels:
  - snowflake
dependencies:
  - pandas
  # Only add packages NOT pre-installed in Snowflake
  # streamlit and snowflake-snowpark-python are already included
```

---

## Best Practices

### 1. Separate Data Access from UI

✅ **DO:**
```python
# utils/data_loader.py
class DataQueries:
    def __init__(self, session):
        self.session = session
    
    def get_sales(self, start_date, end_date):
        return self.session.sql(f"""
            SELECT * FROM sales 
            WHERE date BETWEEN '{start_date}' AND '{end_date}'
        """).to_pandas()

# app.py
queries = DataQueries(session)
df = queries.get_sales('2024-01-01', '2024-12-31')
```

❌ **DON'T:**
```python
# app.py - BAD
df = session.sql("SELECT * FROM sales").to_pandas()
```

### 2. Cache Snowpark Session

```python
@st.cache_resource
def get_snowpark_session():
    try:
        return get_active_session()
    except:
        return Session.builder.config('connection_name', 'default').create()
```

### 3. Use Forms for Multi-Field Input

✅ **DO:**
```python
with st.form("customer_form"):
    name = st.text_input("Name")
    email = st.text_input("Email")
    if st.form_submit_button("Save"):
        save_customer(name, email)
```

❌ **DON'T:**
```python
# BAD - triggers rerun on every input
name = st.text_input("Name")
if st.button("Save"):
    save_customer(name)
```

### 4. Handle Errors Gracefully

```python
try:
    save_customer(name, email)
    st.success("✅ Customer saved!")
except ValueError as e:
    st.error(f"❌ Invalid input: {e}")
    st.info("💡 Check email format")
except Exception as e:
    st.error(f"❌ Error: {e}")
```

### 5. Limit Column Nesting (Max 2 Levels)

✅ **DO:**
```python
col1, col2 = st.columns(2)
with col1:
    label_col, input_col = st.columns([1, 3])
    with label_col:
        st.markdown("Name")
    with input_col:
        name = st.text_input("Name", label_visibility="collapsed")
```

❌ **DON'T:** Create 3+ levels of nested columns (causes Streamlit errors)

---

## Common Pitfalls

### Snowflake-Specific Issues

1. **API Limitations:** Some Streamlit features don't work in Snowflake
   - ❌ `st.dialog()` - not supported
   - ❌ `st.toggle()` - use `st.checkbox()`
   - ❌ `st.rerun()` - not supported in older versions
   - ❌ `st.connection()` - use `get_active_session()`

2. **Package Availability:** Only Snowflake Anaconda packages available
   - Check: https://repo.anaconda.com/pkgs/snowflake/
   - Don't include `streamlit` or `snowflake-snowpark-python` in `environment.yml`

3. **Python Version:** Snowflake supports specific Python versions
   - Check current support: https://docs.snowflake.com/en/release-notes/streamlit-in-snowflake
   - Don't specify Python version in `environment.yml`

4. **Form Parameters:** Some widget parameters not supported
   - ❌ `border=False` in `st.form()`
   - ❌ `border=True` in `st.container()`
   - ❌ `hide_index=True` in `st.dataframe()` (older versions)

### Common Errors

**IndentationError:**
```bash
python -c "import ast; ast.parse(open('file.py').read())"
```

**DuplicateWidgetID:**
Add unique `key` parameter to each widget:
```python
st.text_input("Name", key="customer_name")
st.text_input("Name", key="product_name")
```

**Session Not Found (Local):**
Ensure connection pattern with fallback is implemented correctly.

---

## Pre-Deployment Checklist

1. ✅ Fix all indentation errors: `python -c "import ast; ast.parse(open('file.py').read())"`
2. ✅ Run tests: `pytest streamlit_app/tests/ -v`
3. ✅ Test locally: `streamlit run streamlit_app/app.py`
4. ✅ Verify forms, navigation, data display with Browser tool
5. ✅ Check `environment.yml` only has non-default packages
6. ✅ Deploy: `snow streamlit deploy --replace --connection default`
7. ✅ Test in Snowflake UI: Data → Databases → Schema → Streamlit → App

---

## Quick Reference

### Commands

```bash
# Local Development
streamlit run streamlit_app/app.py

# Testing
pytest streamlit_app/tests/ -v  # Unit/integration
pytest tests/e2e/ --headed  # Playwright E2E

# Deploy
snow streamlit deploy --replace --connection default
schemachange deploy --config-folder . --connection-name default

# Verify
snow streamlit list --connection default
snow streamlit describe <app_name> --connection default
```

### Key Imports

```python
import streamlit as st
import pandas as pd
from snowflake.snowpark.context import get_active_session
from snowflake.snowpark import Session
```

### Session Pattern

```python
@st.cache_resource
def get_snowpark_session():
    try:
        return get_active_session()
    except:
        return Session.builder.config('connection_name', 'default').create()
```

---
