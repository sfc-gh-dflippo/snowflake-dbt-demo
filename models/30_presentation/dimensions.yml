
version: 2

models:

  - name: DIM_CALENDAR_DAY
    columns:
      - name: day_key
        description: "Smart key for this table"
        tests:
          - dbt_constraints.primary_key
      - name: day_seq
        description: "Unique sequence number key"
        tests:
          - unique
          - not_null
      - name: day_dt
        description: "Unique DATE key"
        tests:
          - unique
          - not_null


  - name: DIM_CUSTOMERS
    description: "Customer dimension with flags for customers with orders and open orders"
    columns:
      - name: C_CUST_WID
        description: "Surrogate Key for this table"
        tests:
          - dbt_constraints.primary_key
      - name: INTEGRATION_ID
        description: "The integration key for dim_customers"
        tests:
          - unique
      - name: C_NAME
        config:
          meta:
            masking_policy: TEST_MASKING_POLICY
        description: "Customer Name"
        tests:
          - not_null
      - name: C_ADDRESS
        description: "Customer Address"
      - name: C_NATIONKEY
        description: "Customer Nation Key"
      - name: C_PHONE
        description: "Customer Phone Number"
      - name: C_NATIONKEY
        description: "Customer Nation Key"
      - name: C_ACCTBAL
        description: "Customer Account Balance"
      - name: C_MKTSEGMENT
        description: "Customer Markey Segment"
      - name: C_COMMENT
        description: "Customer Comments"
      - name: C_ACTIVE_CUSTOMER_FLAG
        description: "Customer Has at least one order in the last year"
        tests:
          - not_null
          - accepted_values:
              values: ['Y', 'N']
      - name: C_OPEN_ORDER_CUSOTMER_FLAG
        description: "Customer Has at least one open order in the last year"
        tests:
          - not_null
          - accepted_values:
              values: ['Y', 'N']


  - name: DIM_ORDERS
    description: "All Orders"
    columns:
      - name: O_ORDER_WID
        description: "Surrogate Key for this table"
        tests:
          - dbt_constraints.primary_key
      - name: INTEGRATION_ID
        description: "The integration key for this table"
        tests:
          - unique
      - name: O_CUST_WID
        description: "Foreign key to DIM_CUSTOMERS"
        tests:
          - not_null
          - relationships:
              to: ref('DIM_CUSTOMERS')
              field: C_CUST_WID
      - name: O_ORDERSTATUS
        tests:
          - accepted_values:
              values: ['P', 'F', 'O']
    # Below we are duplicating the FK to test DBT_CONSTRAINTS
    tests:
      - dbt_constraints.foreign_key:
          fk_column_names:
            - O_CUST_WID
          pk_table_name: ref('DIM_CUSTOMERS')
          pk_column_names:
            - C_CUST_WID


  - name: DIM_CURRENT_YEAR_ORDERS
    description: "Sales for the last year"
    columns:
      - name: O_ORDER_WID
        description: "Surrogate Key for this table"
        tests:
          - dbt_constraints.primary_key
      - name: INTEGRATION_ID
        description: "The integration key for this table"
        tests:
          - unique
      - name: O_CUST_WID
        description: "Foreign key to DIM_CUSTOMERS"
        tests:
          - not_null
          # Demonstration that you can define a FK inline
          - dbt_constraints.foreign_key:
              pk_table_name: ref('DIM_CUSTOMERS')
              pk_column_name: C_CUST_WID


  - name: DIM_CURRENT_YEAR_OPEN_ORDERS
    description: "Open sales for the last year"
    columns:
      - name: O_ORDER_WID
        description: "Surrogate Key for this table"
        tests:
          - dbt_constraints.primary_key
      - name: INTEGRATION_ID
        description: "The integration key for this table"
        tests:
          - unique
      - name: O_CUST_WID
        description: "Foreign key to DIM_CUSTOMERS"
        tests:
          - not_null
          - relationships:
              to: ref('DIM_CUSTOMERS')
              field: C_CUST_WID
      - name: O_ORDERSTATUS
        tests:
          - not_null
          - accepted_values:
              values: ['O']
