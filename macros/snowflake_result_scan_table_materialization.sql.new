{#
    Snowflake has a number of statements that return results but cannot be directly used in DDL.
    These include calls to stored procedures, SHOW, and DESCRIBE statements. However, the result_scan
    function allows us to use their results in DDL.

    This materialization will execute the sql of the model and use result_scan to create a table
    with the results. It supports all the same parameters as the table materialization.
#}
{% materialization result_scan_table, adapter='snowflake' %}

  {% set query_tag = set_query_tag() %}

  {% set existing_relation = load_cached_relation(this) %}
  {% set target_relation = this.incorporate(type="table") %}

  {% set grant_config = config.get('grants') %}

  {{ run_hooks(pre_hooks) }}

  {#-- Drop the relation if it was a view to "convert" it in a table. This may lead to
    -- downtime, but it should be a relatively infrequent occurrence  #}
  {% if old_relation is not none and not old_relation.is_table %}
    {{ log("Dropping relation " ~ old_relation ~ " because it is of type " ~ old_relation.type) }}
    {{ drop_relation_if_exists(old_relation) }}
  {% endif %}

  {% call statement('main', language="sql") -%}
      {{ snowflake__get_result_scan_table_sql(target_relation, sql) }}
  {%- endcall %}

  {{ run_hooks(post_hooks) }}

  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}
  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}

  {% do persist_docs(target_relation, model) %}

  {% do unset_query_tag(query_tag) %}

{% endmaterialization %}

{% macro snowflake__get_result_scan_table_sql(relation, sql) %}
    {%- set result_scan_query -%}
        select * from table(result_scan(last_query_id()))
    {%- endset -%}

    {{ sql }}
    ;
    {{ create_table_as(False, relation, result_scan_query, 'sql') }}

{% endmacro %}
